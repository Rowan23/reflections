What happens when you initialize a repository? Why do you need to do it?
	git creates a depository for me to strated creating commit

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	it allows checking a commit before commiting it which adds a commit to the repository
	working directory is just the file directory?

How can you use the staging area to make sure you have one commit per logical
change?
	I can check the difference between the stagin area and the las version using diff --staged
	or just diff

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	where ever a new feature or fix is attempted
	this allows returning to the master without having a buggy new feature

How do the diagrams help you visualize the branch structure?
	It is important to see which updates have been included in which commits

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	it commits any additions or subtractions from the first common parent

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
	pro a lot of the adds and removes are done automatically saving time
	con this may lead to not understanding waht changes have happened

Commands:

git add  |    Add a file to the staging area
git commit  |    Commit the files from the staging area to the repository 
git status  |    Show which files are in the staging area, and which files from the working directory are not part of the repository    
git diff  |    Git diff without arguments is comparing the working directory with the staging area
git diff --staged  |    Compare the staging area with the repository
git reset --hard  |    Undo all changes! There is no rollback for this, so be carefull!
git checkout master  |    Restore the "Head" to the latest check-in (this will be part of a later lesson/module)
git log --graph --oneline <branch1> <branch2>  |    Show a visual representation of the commit history within different branches
git checkout -b new_branch_name  |    Creates a new branch and do a checkout on this branch in one call instead of git branch new_branch_name and git checkout new_branch_name
git merge branch1 branch2  |    Merge two branches, branch2 get merged into branch1
git branch -d name  |    Remove the branch with the specified name
git show commitId  |    Show the changes made in this commit compared to the previous version. This is working even after merging.